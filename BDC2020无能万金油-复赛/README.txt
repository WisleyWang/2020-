可能用到的安装包：
treelib
pyclust
pandas==0.25.1
numpy==1.16.5
pytz
glob
os
matplotlib
sklearn
lightgbm
requests
pickle
tqdm
datetime
gc
warnings

本代码总共有5个模型+1个匹配算法。
运行顺序:
1、data_flow.py #读取源数据并生成采样后的数据
2、依次运行model_A1.py、A2。。。5个模型生成结果文件
3、运行ensemble.py 对结果文件进行融合

bash：
python3 data_flow.py
python3 model_A1.py
python3 model_A2.py
python3 model_A3.py
python3 model_A4.py
python3 model_A5.py
python3 ensemble.py

#####文件构成：
data下存放:
1、源文件（主办方存放 train0711.csv）
2、test B榜数据
3、testA 榜提交文件(可放入trian中训练增加数据量，也可以不放)
4、port_2、port_3为港口坐标文件（通过名字和trian数据进行坐标反查结果整理）
5、中间生成的临时文件
math下存放匹配代码

result下存放模型预测文件

最终提交文件：final_ensemble_result.csv
########模型说明#################
本代码主要有五个模型融合结果，其中两个模型采用划分训练集双模型，将trian数据集分割成两部分，并用
不同的组合特征训练，来增加模型的泛化能力。特征主要分为  统计特征和差序特征 两种特征分开建模。
同时对于打标的方式，也采取了多种，主要有：
50km为范围的到港，
0.25的经纬度差为到港
0.4的经纬度差为到港、
直接选取最后一条记录为到港

######## 线上打榜说明######
第一次提交：
用了两个模型融合，分别跑了两组不同的特征
线上分数：1500+

第二次提交：
在原来的基础上对比了A榜结果，将差距较大的订单，重新预测修正
线上分数：1300+

第三次提交：
融合了5个模型（新运行的模型），并将匹配预测的结果+之前模型融合一起平均
线上分数：832

本代码为了充分考虑模型的泛化能力，不针对test进行单独建模，所以trian的原始数据并没有做过多赛选，
只剔除speed异常数据和trace为None的数据。用几乎全量样本进行训练。

另外match文件夹下存放的是路劲匹配算法代码，针对每条test的建模，在trian中招相似路径进行匹配，且预测方式是
每个运单作为一个样本进行时间预测，将trian数据进行了截断处理，来模拟test数据。
匹配数据后的模型预测结果，和直接取平均分数相近，A榜中表现一般，但最后作为模型融合和验证的辅助。（匹配算法可以不用跑）

###特征说明：#########################
由于港口路由中有的路由港口数据较少，有的港口数据较多，
在构造经纬度总变化特征或者是航行距离特征的时候直接用当前经纬度与起点或者终点的经纬度来构造特
征会很大程度上将所有的距离特征进行了缩短，因此有必要通过考虑中间港口来构造船的总航行位移的特征。

### 港口特征处理######################
具体处理思路是，根据当前船的经纬度坐标与该船路由中的港口经纬度坐标求差值，得到最相近的两个，
按照路由中的顺序即可得到当前位置的前后港口，计算前港口之前所有港口之间的经纬度差值，加上前港口到当
前位置的经纬度差值便可得到当前已经航行的总位移，同理对后港口到终点进行同样的处理，就能得到当前位置与终
点的位移差值，而总的船的航行位移可以近似用两两港口之间的位移变化差值近似代替


##### label的构造
1、主要有两种，同时对应着两种的模型构建方式
2、第一种:一个订单作为一个样本,匹配算法得到的训练集可用于整体预测，将训练集按照test进行截断，即以订单为单位的预测。
3、以运单状态为样本的建模方式，我们采用近乎全量的数据进行建模
打标签的方式为(ETA到港时间-当前时间timestmp)作为lebl进行预测。
4、最终的label可采用平均发，分箱剔除异常、取最后一条订单状态等最为最后的预测时间。

## 其他特征构造详细说明答辩上介绍##################